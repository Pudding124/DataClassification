{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.flat.io",
  "basePath": "/v2",
  "info": {
    "contact": {
      "email": "developers@flat.io",
      "name": "Flat",
      "url": "https://flat.io/support"
    },
    "description": "The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:\n\n* Creating and importing new music scores using MusicXML or MIDI files\n* Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI)\n* Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.\n\nThe Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.\nThe [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/).\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).\n\nYou can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).\n\nGetting Started and learn more:\n\n* [API Overview and interoduction](https://flat.io/developers/docs/api/)\n* [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html)\n* [SDKs](https://flat.io/developers/docs/api/sdks.html)\n* [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html)\n* [Changelog](https://flat.io/developers/docs/api/changelog.html)\n",
    "termsOfService": "https://flat.io/legal",
    "title": "Flat",
    "version": "2.1.0",
    "x-apisguru-categories": [
      "media",
      "collaboration"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_flat.io_img_logo-flat.svg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://raw.githubusercontent.com/FlatIO/api-reference/master/spec/swagger.yaml",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "flat.io"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "OAuth2": {
      "authorizationUrl": "https://flat.io/auth/oauth",
      "description": "OAuth 2.0 authentication for your app or script.\n",
      "flow": "accessCode",
      "scopes": {
        "account.education_profile": "Provides access to the basic person's education profile and public organization information.\n",
        "account.public_profile": "Provides access to the basic person's public profile. Education profiles may be anonymized with this scope, you can request the scope `education_profile` to access to the a basic education account profile.\n",
        "scores": "Full, permissive scope to access all of a user's scores.\n",
        "scores.readonly": "Allows read-only access to all a user's scores. You won't need this scope to read public scores.\n",
        "scores.social": "Allow to post comments and like scores\n"
      },
      "tokenUrl": "https://api.flat.io/oauth/access_token",
      "type": "oauth2"
    }
  },
  "parameters": {
    "score": {
      "description": "Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`).\n",
      "in": "path",
      "name": "score",
      "required": true,
      "type": "string"
    },
    "scoreCollaborator": {
      "description": "Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**\n",
      "in": "path",
      "name": "collaborator",
      "required": true,
      "type": "string"
    },
    "scoreComment": {
      "description": "Unique identifier of a sheet music comment\n",
      "in": "path",
      "name": "comment",
      "required": true,
      "type": "string"
    },
    "scoreRevision": {
      "description": "Unique identifier of a score revision. You can use `last` to fetch the information related to the last version created.\n",
      "in": "path",
      "name": "revision",
      "required": true,
      "type": "string"
    },
    "scoreSharingKey": {
      "description": "This sharing key must be specified to access to a score with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.\n",
      "in": "query",
      "name": "sharingKey",
      "type": "string"
    },
    "user": {
      "description": "Unique identifier of a Flat user. If you authenticated, you can use `me` to refer to the current user.\n",
      "in": "path",
      "name": "user",
      "required": true,
      "type": "string"
    }
  },
  "tags": [
    {
      "description": "These API endpoints are related to the Flat account you are currently using. When using an OAuth2 access token, you can use [`GET /me`](#operation/getAuthenticatedUser) to get information about the account.\n",
      "name": "Account",
      "x-displayName": "Flat Account"
    },
    {
      "description": "Sheet music is the main API object type available for all Flat account.\n\nHere is a typical lifecycle for a music score document on Flat:\n  - An end user can **create a music score** or **import a document** using our [web interface](https://flat.io) or a third-party website/app (e.g. Google Drive) using this API (see [`POST /v2/scores`](#operation/createScore). The creation and import of music scores can be done with this single API endpoint. This one currently supports the [MusicXML](http://www.musicxml.com/) (compressed or not) and [MIDI](https://www.midi.org/specifications).\n  - The scores from a single account can **be listed** with [`GET /users/{user}/scores`](#operation/getUserScores) as well of scores shared with a specific group with [`GET /groups/{group}/scores`](#operation/getGroupScores).\n  - The metadata of a single score can be retrieved with [`GET /scores/{score}`](#operation/getScore).\n  - Scores on Flat have **one or multiple revisions**: creating a new score will create a first revision. These **revisions can be listed** using [`GET /scores/{score}/revisions`](#operation/getScoreRevisions) and a specific **revision data can be downloaded** with [`GET /scores/{score}/revisions/{revision}/{format}`](#operation/getScoreRevisionData). New revisions can be created using our [sheet music editor](https://flat.io) or using [`POST /scores/{score}/revisions`](#operation/createScoreRevision) (this endpoint has similar parameters than during the score creation). The last revision of a document may not directly reflect the really last version of a music score: recent modifications can be made offline or not yet consolidated into a new revision. In average, a new revision is created every 100 modifications made with our editor.\n  - Scores can be **shared publicly** by changing the privacy option with [`POST /scores/{score}`](#operation/editScore), or **individually shared** using the different collaborators API endpoints (see [`POST /scores/{score}/collaborators`](#operation/addScoreCollaborator)).\n",
      "name": "Score",
      "x-displayName": "Music scores"
    },
    {
      "description": "Flat users",
      "name": "User"
    }
  ],
  "paths": {
    "/groups/{group}/scores": {
      "get": {
        "description": "Get the list of scores shared with a group.\n",
        "operationId": "getGroupScores",
        "parameters": [
          {
            "description": "Unique identifier of the group",
            "in": "path",
            "name": "group",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter the score forked from the score id `parent`",
            "in": "query",
            "name": "parent",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The group's scores",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScoreDetails"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [],
        "summary": "List group's scores",
        "tags": [
          "Group",
          "Score"
        ]
      }
    },
    "/me": {
      "get": {
        "description": "Get details about the current authenticated User.\n",
        "operationId": "getAuthenticatedUser",
        "responses": {
          "200": {
            "description": "Current user details",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "account.public_profile",
              "account.education_profile"
            ]
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Account"
        ]
      }
    },
    "/scores": {
      "post": {
        "description": "Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`) or a MIDI (`audio/midi`) file to create the new Flat document.\n\nThis API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).\n\nThe currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).\n",
        "operationId": "createScore",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreCreation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Score created",
            "schema": {
              "$ref": "#/definitions/ScoreDetails"
            }
          },
          "400": {
            "description": "Bad score creation request",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Create a new score",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}": {
      "delete": {
        "description": "This API call will schedule the deletion of the score, its revisions, and whole history.\nThe user calling this API method must have the `aclAdmin` rights on this document to process this action.\nThe score won't be accessible anymore after calling this method and the user's quota will directly be updated.\n",
        "operationId": "deleteScore",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          }
        ],
        "responses": {
          "204": {
            "description": "The score has been removed"
          },
          "403": {
            "description": "Not granted to manage this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Delete a score",
        "tags": [
          "Score"
        ]
      },
      "get": {
        "description": "Get the details of a score identified by the `score` parameter in the URL.\nThe currently authenticated user must have at least a read access to the document to use this API call.\n",
        "operationId": "getScore",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Score details",
            "schema": {
              "$ref": "#/definitions/ScoreDetails"
            }
          },
          "402": {
            "description": "Account overquota and this document is out of the granted quota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores",
              "scores.readonly"
            ]
          }
        ],
        "summary": "Get a score's metadata",
        "tags": [
          "Score"
        ]
      },
      "put": {
        "description": "This API method allows you to change the metadata of a score document (e.g. its `title` or `privacy`), all the properties are optional.\n\nTo edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).\n",
        "operationId": "editScore",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ScoreModification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Score details",
            "schema": {
              "$ref": "#/definitions/ScoreDetails"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Edit a score's metadata",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/collaborators": {
      "get": {
        "description": "This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.\n\nCollaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated).\n",
        "operationId": "getScoreCollaborators",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "200": {
            "description": "List of collaborators",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScoreCollaborator"
              },
              "type": "array"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.readonly",
              "scores"
            ]
          }
        ],
        "summary": "List the collaborators",
        "tags": [
          "Score"
        ]
      },
      "post": {
        "description": "Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a document.\n- To add an existing Flat user to the document, specify its unique identifier in the `user` property.\n- To invite an external user to the document, specify its email in the `userEmail` property.\n- To add a Flat group to the document, specify its unique identifier in the `group` property.\n- To update an existing collaborator, process the same request with different rights.\n",
        "operationId": "addScoreCollaborator",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreCollaboratorCreation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly added collaborator metadata",
            "schema": {
              "$ref": "#/definitions/ScoreCollaborator"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to manage this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Add a new collaborator",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/collaborators/{collaborator}": {
      "delete": {
        "description": "Remove the specified collaborator from the score\n",
        "operationId": "removeScoreCollaborator",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreCollaborator"
          }
        ],
        "responses": {
          "204": {
            "description": "The collaborator has been removed"
          },
          "403": {
            "description": "Not granted to manage this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score or collaborator not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Delete a collaborator",
        "tags": [
          "Score"
        ]
      },
      "get": {
        "description": "Get the information about a collaborator (User or Group).\n",
        "operationId": "getScoreCollaborator",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreCollaborator"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Collaborator information",
            "schema": {
              "$ref": "#/definitions/ScoreCollaborator"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score or collaborator not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.readonly"
            ]
          }
        ],
        "summary": "Get a collaborator",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/comments": {
      "get": {
        "description": "This method lists the different comments added on a music score (documents and inline) sorted by their post dates.",
        "operationId": "getScoreComments",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "200": {
            "description": "The comments of the score",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScoreComment"
              },
              "type": "array"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.readonly",
              "scores.social",
              "scores"
            ]
          }
        ],
        "summary": "List comments",
        "tags": [
          "Score"
        ]
      },
      "post": {
        "description": "Post a document or a contextualized comment on a document.\n\nPlease note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`.\n",
        "operationId": "postScoreComment",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreCommentCreation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new comment",
            "schema": {
              "$ref": "#/definitions/ScoreComment"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score, to post a comment, or your API call triggered our spam filter.",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.social",
              "scores"
            ]
          }
        ],
        "summary": "Post a new comment",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/comments/{comment}": {
      "delete": {
        "operationId": "deleteScoreComment",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreComment"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "204": {
            "description": "The comment has been deleted"
          },
          "403": {
            "description": "Not granted to access to this score or not the original comment creator",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score or comment not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.social",
              "scores"
            ]
          }
        ],
        "summary": "Delete a comment",
        "tags": [
          "Score"
        ]
      },
      "put": {
        "operationId": "updateScoreComment",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreComment"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreCommentUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The edited comment",
            "schema": {
              "$ref": "#/definitions/ScoreComment"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score or not the original comment creator",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.social",
              "scores"
            ]
          }
        ],
        "summary": "Update an existing comment",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/comments/{comment}/resolved": {
      "delete": {
        "operationId": "markScoreCommentUnresolved",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreComment"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "204": {
            "description": "The comment has been unmarked as resolved"
          },
          "403": {
            "description": "Not granted to unmark this comment as resolved"
          },
          "404": {
            "description": "Score or comment not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.social",
              "scores"
            ]
          }
        ],
        "summary": "Mark the comment as unresolved",
        "tags": [
          "Score"
        ]
      },
      "put": {
        "operationId": "markScoreCommentResolved",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreComment"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "204": {
            "description": "The comment has been marked as resolved"
          },
          "403": {
            "description": "Not granted to mark this comment as resolved"
          },
          "404": {
            "description": "Score or comment not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores.social",
              "scores"
            ]
          }
        ],
        "summary": "Mark the comment as resolved",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/fork": {
      "post": {
        "description": "This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.\n\nWhen using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.\n",
        "operationId": "forkScore",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreFork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Score details",
            "schema": {
              "$ref": "#/definitions/ScoreDetails"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Fork a score",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/revisions": {
      "get": {
        "description": "When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.\n\nDepending the plan of the account, this list can be trunked to the few last revisions.\n",
        "operationId": "getScoreRevisions",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "200": {
            "description": "List of revisions",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScoreRevision"
              },
              "type": "array"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores",
              "scores.readonly"
            ]
          }
        ],
        "summary": "List the revisions",
        "tags": [
          "Score"
        ]
      },
      "post": {
        "description": "Update a score by uploading a new revision for this one.\n",
        "operationId": "createScoreRevision",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreRevisionCreation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new created revision metadata",
            "schema": {
              "$ref": "#/definitions/ScoreRevision"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to modify this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores"
            ]
          }
        ],
        "summary": "Create a new revision",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/revisions/{revision}": {
      "get": {
        "description": "When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific\nrevision metadata.\n",
        "operationId": "getScoreRevision",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreRevision"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Revision metadata",
            "schema": {
              "$ref": "#/definitions/ScoreRevision"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [],
        "summary": "Get a score revision",
        "tags": [
          "Score"
        ]
      }
    },
    "/scores/{score}/revisions/{revision}/{format}": {
      "get": {
        "description": "Retrieve the file corresponding to a score revision (the following formats are available: Flat JSON/Adagio JSON `json`, MusicXML\n`mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, or a tumbnail of the first page `thumbnail.png`).\n",
        "operationId": "getScoreRevisionData",
        "parameters": [
          {
            "$ref": "#/parameters/score"
          },
          {
            "$ref": "#/parameters/scoreRevision"
          },
          {
            "$ref": "#/parameters/scoreSharingKey"
          },
          {
            "description": "The format of the file you will retrieve",
            "enum": [
              "json",
              "mxl",
              "xml",
              "mp3",
              "wav",
              "midi",
              "thumbnail.png"
            ],
            "in": "path",
            "name": "format",
            "required": true,
            "type": "string"
          },
          {
            "description": "Only return files already generated and cached in Flat's production\ncache. If the file is not availabe, a 404 will be returned\n",
            "in": "query",
            "name": "onlyCached",
            "type": "boolean"
          },
          {
            "description": "An optional a set of parts to be exported. This parameter must be\nspecified with a list of integers. For example \"1,2,5\".\n",
            "in": "query",
            "name": "parts",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.recordare.musicxml+xml",
          "application/vnd.recordare.musicxml",
          "audio/mp3",
          "audio/wav",
          "audio/midi",
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "Revision metadata",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "402": {
            "description": "Account overquota",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "403": {
            "description": "Not granted to access to this score",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "404": {
            "description": "Score or associated file not found",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [],
        "summary": "Get a score revision data",
        "tags": [
          "Score"
        ]
      }
    },
    "/users/{user}": {
      "get": {
        "description": "Get a public profile of a Flat User.\n",
        "operationId": "getUser",
        "parameters": [
          {
            "description": "This route parameter is the unique identifier of the user. You can specify an email instead of an unique identifier. If you are executing this request authenticated, you can use `me` as a value instead of the current User unique identifier to work on the current authenticated user.\n",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user public details",
            "schema": {
              "$ref": "#/definitions/UserPublic"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "account.public_profile",
              "account.education_profile"
            ]
          }
        ],
        "summary": "Get a public user profile",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{user}/likes": {
      "get": {
        "operationId": "gerUserLikes",
        "parameters": [
          {
            "$ref": "#/parameters/user"
          },
          {
            "description": "Return only the identifiers of the scores",
            "in": "query",
            "name": "ids",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of liked scores",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScoreDetails"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "account.public_profile"
            ]
          }
        ],
        "summary": "List liked scores",
        "tags": [
          "User",
          "Score"
        ]
      }
    },
    "/users/{user}/scores": {
      "get": {
        "description": "Get the list of scores owned by the User\n",
        "operationId": "getUserScores",
        "parameters": [
          {
            "$ref": "#/parameters/user"
          },
          {
            "description": "Filter the score forked from the score id `parent`",
            "in": "query",
            "name": "parent",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user scores",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScoreDetails"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FlatErrorResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "scores",
              "scores.readonly"
            ]
          }
        ],
        "summary": "List user's scores",
        "tags": [
          "User",
          "Score"
        ]
      }
    }
  },
  "definitions": {
    "ClassRoles": {
      "description": "User's Class Role (for Edu users only)",
      "enum": [
        "teacher",
        "student"
      ],
      "type": "string"
    },
    "FlatErrorResponse": {
      "example": {
        "code": "CLIENT_ERROR",
        "id": "123456789",
        "message": "Invalid request"
      },
      "properties": {
        "code": {
          "description": "A corresponding code for this error",
          "type": "string"
        },
        "id": {
          "description": "An unique error identifier generated for the request",
          "type": "string"
        },
        "message": {
          "description": "A printable message for this message",
          "type": "string"
        },
        "param": {
          "description": "The related parameter that caused the error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FlatLocales": {
      "default": "en",
      "description": "The user language",
      "enum": [
        "en",
        "es",
        "fr",
        "it",
        "pl",
        "ro",
        "nl"
      ],
      "type": "string"
    },
    "Group": {
      "description": "A group of users",
      "example": {
        "creationDate": "2015-01-19T00:22:02.387Z",
        "id": "0000000000000000000000043",
        "name": "5th grade",
        "organization": "0000000000000000000000042",
        "readOnly": true,
        "type": "classTeachers",
        "userCount": 24
      },
      "properties": {
        "creationDate": {
          "description": "The creation date of the group",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier of the group",
          "type": "string"
        },
        "name": {
          "description": "The display name of the group",
          "type": "string"
        },
        "organization": {
          "description": "If the group is related to an organization, this field will contain\nthe unique identifier of the organization\n",
          "type": "string"
        },
        "readOnly": {
          "description": "`True` if the group is set in read-only\n",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the group:\n* `generic`: A group created by a Flat user\n* `classTeachers`: A group created automaticaly by Flat that contains\n  the teachers of a class\n* `classStudents`: A group created automaticaly by Flat that contains\n  the studnets of a class\n",
          "enum": [
            "generic",
            "classTeachers",
            "classStudents"
          ],
          "type": "string"
        },
        "usersCount": {
          "description": "The number of users in this group",
          "type": "number"
        }
      },
      "type": "object"
    },
    "OrganizationRoles": {
      "description": "User's Organization Role (for Edu users only)",
      "enum": [
        "admin",
        "billing",
        "teacher",
        "user"
      ],
      "type": "string"
    },
    "ScoreCollaborator": {
      "description": "A collaborator of a score. The `userEmail` and `group` are only available if the requesting user is a collaborator of the related score (in this case these permissions will eventualy not be listed and exposed publicly).\n",
      "example": {
        "aclAdmin": true,
        "aclRead": true,
        "aclWrite": true,
        "id": "000000000000000000000031",
        "score": "000000000000000000000040",
        "userEmail": "user@example.com"
      },
      "properties": {
        "aclAdmin": {
          "default": false,
          "description": "`True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document\n",
          "type": "boolean"
        },
        "aclRead": {
          "default": true,
          "description": "`True` if the related user can read the score. (probably true if the user has a permission on the document).\n",
          "type": "boolean"
        },
        "aclWrite": {
          "default": false,
          "description": "`True` if the related user can modify the score.\n",
          "type": "boolean"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "The unique identifier of the score permission",
          "type": "string"
        },
        "score": {
          "description": "The unique identifier of the score",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserPublic"
        },
        "userEmail": {
          "description": "If the collaborator is not a user of Flat yet, this field will contain his email.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScoreCollaboratorCreation": {
      "description": "A collaborator of a score. The `userEmail` and `group` are only available if the requesting user is a collaborator of the related score (in this case these permissions will eventualy not be listed and exposed publicly).\n",
      "example": {
        "aclAdmin": false,
        "aclRead": true,
        "aclWrite": true,
        "userEmail": "jdoe@flat.io"
      },
      "properties": {
        "aclAdmin": {
          "default": false,
          "description": "`True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document\n",
          "type": "boolean"
        },
        "aclRead": {
          "default": true,
          "description": "`True` if the related user can read the score. (probably true if the user has a permission on the document).\n",
          "type": "boolean"
        },
        "aclWrite": {
          "default": false,
          "description": "`True` if the related user can modify the score.\n",
          "type": "boolean"
        },
        "group": {
          "description": "The unique identifier of a Flat group",
          "type": "string"
        },
        "user": {
          "description": "The unique identifier of a Flat user",
          "type": "string"
        },
        "userEmail": {
          "description": "Fill this field to invite an individual user by email.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScoreComment": {
      "description": "Comment added on a sheet music",
      "example": {
        "comment": "@[000000000000000000000000:flat] Great work!",
        "context": {
          "measureUuids": [
            "e6a6a60b-8710-f819-9a49-e907b19c6f1f",
            "da83d93c-e3a6-3c73-1bbe-15e5131d6437",
            "056ec5eb-9213-df56-6ae8-d9b99673dc48"
          ],
          "partUuid": "91982db7-2e6d-285e-7a19-76b4bd005b8b",
          "staffIdx": 0,
          "startDpq": 1,
          "startTimePos": 2,
          "stopDpq": 1,
          "stopTimePos": 3
        },
        "date": "2017-01-26T20:29:10.622Z",
        "id": "000000000000000000000010",
        "mentions": [
          "000000000000000000000000"
        ],
        "modificationDate": "2017-01-26T21:29:10.622Z",
        "rawComment": "@flat: Great work!",
        "replyTo": "000000000000000000000000",
        "resolved": true,
        "resolvedBy": "000000000000000000000000",
        "revision": "000000000000000000000011",
        "score": "000000000000000000000042",
        "spam": false,
        "type": "inline",
        "user": "000000000000000000000001"
      },
      "properties": {
        "comment": {
          "description": "The comment text that can includes mentions using the following\nformat: `@[id:username]`.\n",
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/ScoreCommentContext"
        },
        "date": {
          "description": "The date when the comment was posted",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The comment unique identifier",
          "type": "string"
        },
        "mentions": {
          "description": "The list of user identifier mentioned on the score",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "modificationDate": {
          "description": "The date of the last comment modification",
          "format": "date-time",
          "type": "string"
        },
        "rawComment": {
          "description": "A raw version of the comment, that can be displayed without parsing\nthe mentions.\n",
          "type": "string"
        },
        "replyTo": {
          "description": "When the comment is a reply to another comment, the unique identifier of the parent comment\n",
          "type": "string"
        },
        "resolved": {
          "description": "For inline comments, the comment can be marked as resolved and will be hidden in the future responses\n",
          "type": "boolean"
        },
        "resolvedBy": {
          "description": "If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved\n",
          "type": "string"
        },
        "revision": {
          "description": "The unique identifier of revision the comment was posted",
          "type": "string"
        },
        "score": {
          "description": "The unique identifier of the score where the comment was posted",
          "type": "string"
        },
        "spam": {
          "description": "`true  if the message has been detected as spam and hidden from other users\n",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the comment",
          "enum": [
            "document",
            "inline"
          ],
          "type": "string"
        },
        "user": {
          "description": "The author unique identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScoreCommentContext": {
      "description": "The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).\n",
      "example": {
        "measureUuids": [
          "e6a6a60b-8710-f819-9a49-e907b19c6f1f",
          "da83d93c-e3a6-3c73-1bbe-15e5131d6437",
          "056ec5eb-9213-df56-6ae8-d9b99673dc48"
        ],
        "partUuid": "91982db7-2e6d-285e-7a19-76b4bd005b8b",
        "staffIdx": 0,
        "startDpq": 1,
        "startTimePos": 2,
        "stopDpq": 1,
        "stopTimePos": 3
      },
      "properties": {
        "measureUuids": {
          "description": "The list of measure UUIds",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "partUuid": {
          "description": "The unique identifier (UUID) of the score part",
          "type": "string"
        },
        "staffIdx": {
          "description": "The identififer of the staff",
          "type": "number"
        },
        "startDpq": {
          "type": "number"
        },
        "startTimePos": {
          "type": "number"
        },
        "stopDpq": {
          "type": "number"
        },
        "stopTimePos": {
          "type": "number"
        }
      },
      "required": [
        "partUuid",
        "staffIdx",
        "measureUuids",
        "startTimePos",
        "stopTimePos",
        "startDpq",
        "stopDpq"
      ],
      "type": "object"
    },
    "ScoreCommentCreation": {
      "description": "Creation of a comment",
      "example": {
        "comment": "@[000000000000000000000000:flat] Great work!",
        "context": {
          "measureUuids": [
            "e6a6a60b-8710-f819-9a49-e907b19c6f1f",
            "da83d93c-e3a6-3c73-1bbe-15e5131d6437",
            "056ec5eb-9213-df56-6ae8-d9b99673dc48"
          ],
          "partUuid": "91982db7-2e6d-285e-7a19-76b4bd005b8b",
          "staffIdx": 0,
          "startDpq": 1,
          "startTimePos": 2,
          "stopDpq": 1,
          "stopTimePos": 3
        },
        "mentions": [
          "000000000000000000000000"
        ],
        "rawComment": "@flat: Great work!",
        "replyTo": "000000000000000000000000",
        "revision": "000000000000000000000010"
      },
      "properties": {
        "comment": {
          "description": "The comment text that can includes mentions using the following format: `@[id:username]`.\n",
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/ScoreCommentContext"
        },
        "mentions": {
          "description": "The list of user identifiers mentioned in this comment",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rawComment": {
          "description": "A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.\n",
          "type": "string"
        },
        "replyTo": {
          "description": "When the comment is a reply to another comment, the unique identifier of the parent comment\n",
          "type": "string"
        },
        "revision": {
          "description": "The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \"last\", the API will automatically take the last revision created.\n",
          "type": "string"
        }
      },
      "required": [
        "comment"
      ],
      "type": "object"
    },
    "ScoreCommentUpdate": {
      "description": "Update of a comment",
      "example": {
        "comment": "@[000000000000000000000000:flat] Great work!",
        "context": {
          "measureUuids": [
            "e6a6a60b-8710-f819-9a49-e907b19c6f1f",
            "da83d93c-e3a6-3c73-1bbe-15e5131d6437",
            "056ec5eb-9213-df56-6ae8-d9b99673dc48"
          ],
          "partUuid": "91982db7-2e6d-285e-7a19-76b4bd005b8b",
          "staffIdx": 0,
          "startDpq": 1,
          "startTimePos": 2,
          "stopDpq": 1,
          "stopTimePos": 3
        },
        "mentions": [
          "000000000000000000000000"
        ],
        "rawComment": "@flat: Great work!",
        "replyTo": "000000000000000000000000",
        "revision": "000000000000000000000011"
      },
      "properties": {
        "comment": {
          "description": "The comment text that can includes mentions using the following format: `@[id:username]`.\n",
          "maxLength": 10000,
          "minLength": 1,
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/ScoreCommentContext"
        },
        "rawComment": {
          "description": "A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.\n",
          "maxLength": 10000,
          "minLength": 1,
          "type": "string"
        },
        "revision": {
          "description": "The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \"last\", the API will automatically take the last revision created.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScoreCommentsCounts": {
      "description": "A computed version of the total, unique, weekly and monthly number of\ncomments added on the documents (this doesn't include inline comments).\n",
      "example": {
        "monthly": 30,
        "total": 42,
        "unique": 35,
        "weekly": 10
      },
      "properties": {
        "monthly": {
          "description": "The monthly unique number of comments added on the score",
          "type": "number"
        },
        "total": {
          "description": "The total number of comments added on the score",
          "type": "number"
        },
        "unique": {
          "description": "The unique (1/user) number of comments added on the score",
          "type": "number"
        },
        "weekly": {
          "description": "The weekly unique number of comments added on the score",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ScoreCreation": {
      "description": "A new created score",
      "example": {
        "data": "<score-partwise version=\"3.0\"></score-partwise>",
        "googleDriveFolder": "0B-0000000000000000",
        "privacy": "private",
        "title": "My new score"
      },
      "properties": {
        "data": {
          "$ref": "#/definitions/ScoreData"
        },
        "dataEncoding": {
          "$ref": "#/definitions/ScoreDataEncoding"
        },
        "googleDriveFolder": {
          "description": "If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory.\n",
          "type": "string"
        },
        "privacy": {
          "$ref": "#/definitions/ScorePrivacy"
        },
        "source": {
          "$ref": "#/definitions/ScoreSource"
        },
        "title": {
          "description": "The title of the new score.\n\nIf this title is not specified, the API will try to (in this order):\n  - Use the name of the file for files from a specified `source` (e.g. Google Drive)\n  - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).\n  - Set a default title (e.g. \"New Music Score\")\n\nIf the title is already used, the API will append the creation date after the title. If the title is too long, the API may trim this one.\n",
          "type": "string"
        }
      },
      "required": [
        "privacy"
      ],
      "type": "object"
    },
    "ScoreData": {
      "description": "The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\n\nBinary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.\n",
      "example": "<score-partwise version=\"3.0\"></score-partwise>",
      "type": "string"
    },
    "ScoreDataEncoding": {
      "description": "The optional encoding of the score data. This property must match the encoding used for the `data` property.",
      "enum": [
        "base64"
      ],
      "type": "string"
    },
    "ScoreDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/ScoreSummary"
        },
        {
          "properties": {
            "collaborators": {
              "description": "The list of the collaborators of the score",
              "items": {
                "$ref": "#/definitions/ScoreCollaborator"
              },
              "type": "array"
            },
            "comments": {
              "$ref": "#/definitions/ScoreCommentsCounts"
            },
            "creationDate": {
              "description": "The date when the score was created",
              "format": "date-time",
              "type": "string"
            },
            "googleDriveFileId": {
              "description": "If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}`\n",
              "type": "string"
            },
            "instruments": {
              "description": "An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`.\n",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "likes": {
              "$ref": "#/definitions/ScoreLikesCounts"
            },
            "modificationDate": {
              "description": "The date of the last revision of the score",
              "format": "date-time",
              "type": "string"
            },
            "organization": {
              "description": "If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`.\n",
              "type": "string"
            },
            "parentScore": {
              "description": "If the score has been forked, the unique identifier of the parent score.\n",
              "type": "string"
            },
            "rights": {
              "$ref": "#/definitions/ScoreRights"
            },
            "views": {
              "$ref": "#/definitions/ScoreViewsCounts"
            }
          },
          "type": "object"
        }
      ],
      "description": "The score and all its details",
      "example": {
        "collaborators": [
          {
            "aclAdmin": true,
            "aclRead": true,
            "aclWrite": true,
            "user": {
              "id": "000000000000000000000001",
              "name": "Flat Team",
              "picture": "https://flat.io/img/logo_flat.svg",
              "printableName": "Flat Team",
              "username": "flat"
            }
          },
          {
            "aclAdmin": false,
            "aclRead": true,
            "aclWrite": false,
            "group": {
              "creationDate": "2015-01-19T00:22:02.387Z",
              "id": "0000000000000000000000043",
              "name": "5th grade",
              "organization": "0000000000000000000000042",
              "readOnly": true,
              "type": "classTeachers",
              "userCount": 24
            }
          }
        ],
        "comments": {
          "monthly": 0,
          "total": 0,
          "unique": 0,
          "weekly": 0
        },
        "creationDate": "2017-01-15T20:03:25.771Z",
        "googleDriveFileId": "0BCDEFAGA00000000000000",
        "htmlUrl": "https://flat.io/score/000000000000000000000000",
        "id": "000000000000000000000000",
        "instruments": [
          "keyboards.grand-piano",
          "woodwinds.oboe",
          "woodwinds.clarinet"
        ],
        "likes": {
          "monthly": 0,
          "total": 0,
          "weekly": 0
        },
        "modificationDate": "2017-01-26T20:29:10.622Z",
        "organization": "000000000000000000000030",
        "parentScore": "000000000000000000000040",
        "privacy": "private",
        "rights": {
          "aclAdmin": true,
          "aclRead": true,
          "aclWrite": true
        },
        "title": "My score",
        "user": {
          "id": "000000000000000000000001",
          "name": "Flat Team",
          "picture": "https://flat.io/img/logo_flat.svg",
          "printableName": "Flat Team",
          "username": "flat"
        },
        "views": {
          "monthly": 0,
          "total": 0,
          "weekly": 0
        }
      },
      "type": "object"
    },
    "ScoreFork": {
      "description": "Options to fork the score",
      "type": "object"
    },
    "ScoreLikesCounts": {
      "description": "A computed version of the weekly, monthly and total of number of likes\nfor a score\n",
      "example": {
        "monthly": 30,
        "total": 42,
        "weekly": 10
      },
      "properties": {
        "monthly": {
          "description": "The number of new likes during the last month",
          "type": "number"
        },
        "total": {
          "description": "The total number of likes of the score",
          "type": "number"
        },
        "weekly": {
          "description": "The number of new likes during the last week",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ScoreModification": {
      "description": "Edit the score metadata",
      "example": {
        "privacy": "private",
        "title": "Edited title"
      },
      "properties": {
        "privacy": {
          "$ref": "#/definitions/ScorePrivacy"
        },
        "sharingKey": {
          "description": "When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated.",
          "pattern": "^[a-f0-9]{128}$",
          "type": "string"
        },
        "title": {
          "description": "A new title of the score",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScorePrivacy": {
      "description": "The score main privacy mode.\n\n- `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.\n- `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.\n- `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.\n- `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.\n\nThe score can also be individually shared to a set of users or groups using the different collaborators API methods.\n\nWhen a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.\n\nWhen using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).\n",
      "enum": [
        "public",
        "private",
        "organizationPublic",
        "privateLink"
      ],
      "type": "string"
    },
    "ScoreRevision": {
      "description": "A score revision metadata",
      "example": {
        "autosave": true,
        "collaborators": [
          "000000000000000000000010",
          "000000000000000000000020"
        ],
        "creationDate": "2017-01-26T20:29:10.622Z",
        "description": "New revision",
        "user": "000000000000000000000020"
      },
      "properties": {
        "autosave": {
          "description": "True if this revision was automatically generated by Flat and not on\npurpose by the user.\n",
          "type": "boolean"
        },
        "collaborators": {
          "items": {
            "description": "The list of user identifier or collaborators who worked on this\nrevision. This is list is built from the history of the revision\nspecified during the creation of the revision.\n",
            "type": "string"
          },
          "type": "array"
        },
        "creationDate": {
          "description": "The date when this revision was created",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "A description associated to the revision",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier of the revision.",
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/ScoreRevisionStatistics"
        },
        "user": {
          "description": "The user identifier who created the revision",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScoreRevisionCreation": {
      "description": "A new created revision",
      "example": {
        "autosave": true,
        "data": "<score-partwise version=\"3.0\"></score-partwise>",
        "description": "New revision",
        "history": [
          {
            "args": {
              "measureUuid": "0be9f739-3213-f312-bb0a-00ad0c787ef7",
              "previousUuid": "888cb742-2110-a050-ba71-28300ba6d61f"
            },
            "fnc": "action.AddMeasure",
            "id": "000000000000000000000090",
            "userId": "000000000000000000000010"
          }
        ]
      },
      "properties": {
        "autosave": {
          "description": "Must be set to `true` if the revision was created automatically.\n",
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/ScoreData"
        },
        "dataEncoding": {
          "$ref": "#/definitions/ScoreDataEncoding"
        },
        "description": {
          "description": "A description associated to the revision",
          "type": "string"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "ScoreRevisionStatistics": {
      "description": "The statistics related to the score revision (additions and deletions)\n",
      "example": {
        "additions": 24,
        "deletions": 5
      },
      "properties": {
        "additions": {
          "description": "The number of additions operations in the last revision",
          "type": "number"
        },
        "deletions": {
          "description": "The number of deletions operations in the last revision",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ScoreRights": {
      "description": "The rights of the current user on a score",
      "example": {
        "aclAdmin": true,
        "aclRead": true,
        "aclWrite": true
      },
      "properties": {
        "aclAdmin": {
          "default": false,
          "description": "`True` if the current user can manage the current document, i.e.\nchanging the document permissions and deleting the document\n",
          "type": "boolean"
        },
        "aclRead": {
          "description": "`True` if the current user can read the current document\n"
        },
        "aclWrite": {
          "default": false,
          "description": "`True` if the current user can modify the current document\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ScoreSource": {
      "example": {
        "googleDrive": "0B-0000000000000001"
      },
      "properties": {
        "googleDrive": {
          "description": "If the score is a file on Google Drive, this field property must contain its identifier. To use this method, the Drive file must be public or the Flat Drive App must have access to the file.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScoreSummary": {
      "description": "A summary of the score details",
      "example": {
        "htmlUrl": "https://flat.io/score/000000000000000000000000",
        "id": "000000000000000000000000",
        "privacy": "private",
        "title": "My score",
        "user": {
          "id": "000000000000000000000001",
          "name": "Flat Team",
          "picture": "https://flat.io/img/logo_flat.svg",
          "printableName": "Flat Team",
          "username": "flat"
        }
      },
      "properties": {
        "htmlUrl": {
          "description": "The url where the score can be viewed in a web browser",
          "format": "url",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier of the score",
          "type": "string"
        },
        "privacy": {
          "$ref": "#/definitions/ScorePrivacy"
        },
        "sharingKey": {
          "description": "The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)",
          "type": "string"
        },
        "title": {
          "description": "The title of the score",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserPublicSummary"
        }
      },
      "type": "object"
    },
    "ScoreViewsCounts": {
      "description": "A computed version of the total, weekly, and monthly number of views of\nthe score\n",
      "example": {
        "monthly": 30,
        "total": 42,
        "weekly": 10
      },
      "properties": {
        "monthly": {
          "description": "The monthly number of views of the score",
          "type": "number"
        },
        "total": {
          "description": "The total number of views of the score",
          "type": "number"
        },
        "weekly": {
          "description": "The weekly number of views of the score",
          "type": "number"
        }
      },
      "type": "object"
    },
    "UserBasics": {
      "discriminator": "userType",
      "example": {
        "id": "000000000000000000000001",
        "isPowerUser": true,
        "name": "Flat Team",
        "picture": "https://flat.io/img/logo_flat.svg",
        "printableName": "Flat Team",
        "username": "flat"
      },
      "properties": {
        "id": {
          "description": "The user unique identifier",
          "type": "string"
        },
        "isPowerUser": {
          "description": "User license status. 'True' if user is an individual Power user",
          "type": "boolean"
        },
        "name": {
          "description": "A displayable name for the user",
          "type": "string"
        },
        "picture": {
          "description": "User pictue",
          "type": "string"
        },
        "printableName": {
          "description": "The name that can be directly printed (name or username)",
          "type": "string"
        },
        "username": {
          "description": "The user name (unique for the organization)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/UserPublic"
        },
        {
          "properties": {
            "id": {
              "description": "Identifier of the user",
              "type": "string"
            },
            "locale": {
              "$ref": "#/definitions/FlatLocales"
            },
            "privateProfile": {
              "description": "Tell either this user profile is private or not (individual accounts only)",
              "type": "boolean"
            },
            "type": {
              "description": "The type of account",
              "enum": [
                "user",
                "guest"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "User details",
      "type": "object"
    },
    "UserPublic": {
      "allOf": [
        {
          "$ref": "#/definitions/UserPublicSummary"
        },
        {
          "properties": {
            "bio": {
              "description": "User's biography",
              "type": "string"
            },
            "followersCount": {
              "description": "Number of followers the user have",
              "type": "integer"
            },
            "followingCount": {
              "description": "Number of people the user follow",
              "type": "integer"
            },
            "likedScoresCount": {
              "description": "Number of the scores liked by the user",
              "type": "integer"
            },
            "ownedPublicScoresCount": {
              "description": "Number of public score the user have",
              "type": "integer"
            },
            "registrationDate": {
              "description": "Date the user signed up",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Public User details",
      "example": {
        "bio": "The Flat Team",
        "classRole": "teacher",
        "followersCount": 4242,
        "followingCount": 0,
        "htmlUrl": "https://flat.io/flat",
        "id": "000000000000000000000001",
        "isPowerUser": true,
        "likedScoresCount": 1,
        "name": "Flat Team",
        "organization": "0000000000000000000000042",
        "organizationRole": "admin",
        "ownedPublicScoresCount": 10,
        "picture": "https://flat.io/img/logo_flat.svg",
        "printableName": "Flat Team",
        "registrationDate": "2015-01-19T00:22:02.387Z",
        "username": "flat"
      }
    },
    "UserPublicSummary": {
      "allOf": [
        {
          "$ref": "#/definitions/UserBasics"
        },
        {
          "properties": {
            "classRole": {
              "$ref": "#/definitions/ClassRoles"
            },
            "htmlUrl": {
              "description": "Link to user profile (for Indiv. users only)",
              "type": "string"
            },
            "organization": {
              "description": "Organization ID (for Edu users only)",
              "type": "string"
            },
            "organizationRole": {
              "$ref": "#/definitions/OrganizationRoles"
            }
          },
          "type": "object"
        }
      ],
      "description": "Public User details summary",
      "example": {
        "classRole": "teacher",
        "htmlUrl": "https://flat.io/flat",
        "id": "000000000000000000000001",
        "isPowerUser": true,
        "name": "Flat Team",
        "organization": "0000000000000000000000042",
        "organizationRole": "admin",
        "picture": "https://flat.io/img/logo_flat.svg",
        "printableName": "Flat Team",
        "username": "flat"
      }
    }
  }
}
